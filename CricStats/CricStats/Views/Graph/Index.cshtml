
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var controllerName = this.ViewContext.RouteData.Values["controller"].ToString();
}




<div id="Graph1"></div>

<div id="Graph2" ></div>

<div id="Graph3" ></div>



<script type="text/javascript" src="https://canvasjs.com/assets/script/canvasjs.min.js"></script>
<script type="text/javascript" src="https://canvasjs.com/assets/script/jquery-1.11.1.min.js"></script>
<script type="text/javascript" src="https://canvasjs.com/assets/script/jquery.canvasjs.min.js"></script>

<script>
    $(document).ready(function () {

        var result = @Html.Raw(ViewBag.DataPoints);
        var dataPoints =[];
        for(var i = 0; i < result.length; i++){
            dataPoints.push({ y: result[i].runsScored, label:result[i].MatchPlayer});
        }

        var chart = new CanvasJS.Chart("Graph1", {
            animationEnabled: true,
            title: {
                text: "Highest Run for a player with Match Name"
            },
            data: [
                {
                    type: "column",
                    dataPoints:
                        dataPoints,

                }
            ]
        });
        chart.render();


        //Graph2
        var results = @Html.Raw(ViewBag.DataPoints2);
        var dataPoints2 =[];
        for(var i = 0; i < results.length; i++){
            dataPoints2.push({ y: results[i].BattingAverage, label: results[i].PlayerName});
        }

        var options = {
            title: {
                text: "5 Players with Highest Averages "
            },
            animationEnabled: true,
            data: [{
                type: "pie",
                startAngle: 40,
                toolTipContent: "<b>{label}</b>: {y} Runs",
                showInLegend: "true",
                legendText: "{label}",
                indexLabelFontSize: 16,
                indexLabel: "{label} - {y} Runs",
                dataPoints: dataPoints2,
            }]
        };
        $("#Graph2").CanvasJSChart(options);

        function toTypeDate(rawDate) {
            var rawDate = new Date();

            var day = ("0" + rawDate.getDate()).slice(-2);
            var month = ("0" + (rawDate.getMonth() + 1)).slice(-2);

            return rawDate.getFullYear() + "-" + (month) + "-" + (day);

        }



        //graph3
         var results1 = @Html.Raw(ViewBag.DataPoints3);
        var dataPoints3 =[];
        for(var i = 0; i < results1.length; i++){
            dataPoints3.push({ y: results1[i].TeamScore, label: toTypeDate(results1[i].Date)});
        }

        var options2 = {
            animationEnabled: true,
            title: {
                text: "Team Gateway scores on timeLine"
            },
            axisX: {
                title: "Date"
            },
            axisY: {
                title: "Runs"
                
            },
            data: [{
               
                type: "spline",
                dataPoints:
                    dataPoints3,
            }]
        };
        $("#Graph3").CanvasJSChart(options2);




    });

</script>

